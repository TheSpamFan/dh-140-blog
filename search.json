[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "eminemSentiment",
    "section": "",
    "text": "Post With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nAug 1, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nSentiment in Eminem’s Discography\n\n\n\n\n\nFirst Draft\n\n\n\n\n\nJul 31, 2024\n\n\nKi Riley\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJul 29, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/final_blog.html",
    "href": "posts/final_blog.html",
    "title": "Sentiment in Eminem’s Discography",
    "section": "",
    "text": "Project Overview\n      In the genres of hip-hop and rap, Eminem is a rapper whose clever and technical delivery of provocative lyrics has made him famous among the general public. While his lyrical skills are undisputed, it is the raw emotions contained within that truly allows him to stand-out among his peers. Eminem frequently tackles dark subjects, such as domestic violence, drug addiction, murder, and rape while also exploring more vulnerable topics such as mental illness and fatherhood. My project explores how these intense subjects are presented by performing sentiment analysis on Eminem’s discography across his albums. Utilizing the VADER analyzer from nltk’s sentiment module, this paper will be used to uncover the emotional trends, patterns, and themes present in his works. More specifically, this project seeks to answer the question:\n\nHow does the sentiment in Eminem’s lyrics reflect the themes of struggle and resilience across his albums?"
  },
  {
    "objectID": "posts/final_blog.html#introduction",
    "href": "posts/final_blog.html#introduction",
    "title": "Sentiment in Eminem’s Discography",
    "section": "",
    "text": "Project Overview\n      In the genres of hip-hop and rap, Eminem is a rapper whose clever and technical delivery of provocative lyrics has made him famous among the general public. While his lyrical skills are undisputed, it is the raw emotions contained within that truly allows him to stand-out among his peers. Eminem frequently tackles dark subjects, such as domestic violence, drug addiction, murder, and rape while also exploring more vulnerable topics such as mental illness and fatherhood. My project explores how these intense subjects are presented by performing sentiment analysis on Eminem’s discography across his albums. Utilizing the VADER analyzer from nltk’s sentiment module, this paper will be used to uncover the emotional trends, patterns, and themes present in his works. More specifically, this project seeks to answer the question:\n\nHow does the sentiment in Eminem’s lyrics reflect the themes of struggle and resilience across his albums?"
  },
  {
    "objectID": "posts/final_blog.html#methods",
    "href": "posts/final_blog.html#methods",
    "title": "Sentiment in Eminem’s Discography",
    "section": "Methods",
    "text": "Methods\nFocusing the Data\n      To begin analyzing sentiment across Eminem’s discography, the set of data first had to be determined. Three subsets were quickly eliminated:\n\nCompilation albums, such as Curtain Call: The Hits, repeated songs present in previous albums and prioritized hits over a cohesive musical experience.\nDeluxe editions of albums included extra tracks which typically did not make the original releases cut and might not reflect the intended thematic progression of the album.\nSingles were commonly either pre-releases before being added to the following album or collaborations with other artists whose own sentiment characteristics could distort the collected data.\n\n      This resulted in an original collection size of 13 albums to analyze. Upon further investigation, Eminem: The Re-Up was found to also be a compilation album, bringing the collection size down to 12 albums.\nCollecting the Data\n      It quickly became apparent that Eminem’s lyrics would need to be webscraped, as the many databases online created to store and present musical artist’s lyrics only contained Eminem’s first couple releases. Genius.com was selected, due to my personal favorable experience with the website and the vast lyrical library it contains. A custom web scraper was coded in Python, using the Python libraries request and BeautifulSoup.\n      A major challenge was getting past Genius.com’s bot detection and coverage by Cloudflare. Midway through testing the scraper in the project’s Jupyter server, my requests stopped working, encountering a 403 output. To get around this, I found I needed to run my code in my local environment. I utilized Python’s proxy library and rotated proxies using my PC’s terminal. The data was then exported and saved to lyrics_lines.txt.\n\n\nShow the code\n# misc\nimport requests\nfrom bs4 import BeautifulSoup\nimport json\nimport re\nimport string\n\n# plots\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\nimport numpy as np\n\n# sentiment\nimport nltk\nfrom nltk.sentiment import vader\nnltk.download('vader_lexicon')\nnltk.download('stopwords')\n\n# stop words\nfrom string import punctuation\nfrom nltk.corpus import stopwords\nmyStopWords = list(punctuation) + stopwords.words('english')\n\n\n[nltk_data] Downloading package vader_lexicon to\n[nltk_data]     /home/jovyan/nltk_data...\n[nltk_data]   Package vader_lexicon is already up-to-date!\n[nltk_data] Downloading package stopwords to /home/jovyan/nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n\n\n\n\nShow the code\n# NOTE: I was only able to run this on my local environment. As I continued testing, I needed to begin rotating my proxies\n# to avoid my IP being pinged\n\n# retrieve the link for every album's genius.com page\nresponse = requests.get(\"https://genius.com/artists/albums?for_artist_page=45&id=Eminem\")\nhtml_string = response.text\ndocument = BeautifulSoup(html_string, 'html.parser')\nalbum_list = document.find_all(\"a\", class_=\"album_link\")   # &lt;a class=\"album_link\"&gt; tags contain the html\n\n#albums contains the desired album names\nalbums = [\"The Slim Shady LP\", \"The Marshall Mathers LP\", \"The Eminem Show\",\n         \"Encore\", \"Eminem Presents the Re-Up\", \"Relapse\", \"Recovery\", \"The Marshall Mathers LP 2\",\n         \"Revival\", \"Kamikaze\", \"Music to Be Murdered By\", \"Music to Be Murdered By: Side B\", \n          \"The Death of Slim Shady (Coup De Grâce)\"]\nalbum_links = []\nfor a in album_list:\n  if a.text in albums:                      # select desired albums from list\n    album_links.append((a.text, a['href'])) # album links is (album name, link)\n\n# create dictionary containing scraped text\neminem_lyrics = {}\nfor album in album_links:          \n  eminem_lyrics[album[0]] = {}     # key = album name, val = dictionary\n  album_page = requests.get(\"https://genius.com\" + album[1]) # go to album page\n  album_html = album_page.text\n  doc = BeautifulSoup(album_html, 'html.parser')\n  songs_list = doc.find_all(\"div\", class_=\"chart_row-content\") # this tag's field contains the list of songs\n  \n  for s in songs_list:\n    # &lt;a href = song_link&gt; song_name &lt;/a&gt;\n    a = s.find('a')\n    s_title = a.find('h3').get_text(strip=True)\n    eminem_lyrics[album[0]][s_title] = {}   # key = album_name -&gt; song_name, val = dictionary\n    \n    s_link = a['href']\n    # now use the link s_link to go to the song's lyrics page\n    lyrics_page = requests.get(s_link)\n    lyrics_html = lyrics_page.text\n    d = BeautifulSoup(lyrics_html, 'html.parser')\n    ly = d.find('div', class_=\"Lyrics__Container-sc-1ynbvzw-1 kUgSbL\") # song's lyrics contained within this field \n    for br in ly.find_all('br'): \n      br.replace_with('\\n')  # the 'br' tag denotes a new line in the raw html\n    eminem_lyrics[album[0]][s_title]['lyrics'] = ly.text  # key = album_name -&gt; song_name -&gt; 'lyrics', val = string of lyrics\n\n# named lyrics_lines_dud so that it does not overwrite lyrics_lines imported from my local system.\nwith open('lyrics_lines_dud.txt', 'w') as lyrics_file:  # export dictionary to .txt file\n     lyrics_file.write(json.dumps(eminem_lyrics))\n\n\nCleaning the Data\n      Before sentiment analysis could begin, the raw textual data required additional cleaning. Many of the scraped song names and lyrics contained non-ASCII characters. In addition, certain character sequences characteristic of html coding, such as “\\‘” and ’xa0’, needed to be replaced with their ASCII counterparts. While VADER, the sentiment analyzer chosen for this project, is capable of handling non-ASCII characters, its performance might not be optimal when handling them. In addition, structural indicators such as [Verse 1] and [Chorus], as well as noise descriptions such as *camera flashes*, needed to be removed in order to focus solely on lyrical content. Finally, excess white space and consecutive newlines were handled.\n\n\nShow the code\n# import data from txt file\nwith open('lyrics_lines.txt') as f:\n  data = f.read()\n# reconstructing the data as a dictionary \nraw_lyrics = json.loads(data) \n\n# cleaning the song title\ndef clean_title(s):\n  # replace non-breaking space (\\xa0) with a regular space\n  s = s.replace('\\xa0', ' ')\n    \n  # reg expr to remove or replace other unwanted characters\n  s = re.sub(r'[^\\x00-\\x7F]+', '', s)  # Removes non-ASCII characters\n  return s\n\n# cleaning the textual data\ndef clean_string(l):\n  s = clean_title(l)\n  \n  # reg expr to get rid of all text enclosed by **\n  s = re.sub(r'\\*[^*]*\\*', '', s)\n  \n  # reg expr to get rid of all text enclosed by []\n  s = re.sub(r'\\[[^\\]]*\\]', '', s)\n  \n  # remove extra white space while preserving new lines\n  s = re.sub(r'[^\\S\\n]+', ' ', s) \n  \n  # condense consecutive new lines into a single new line\n  s = re.sub(r'\\n+', '\\n', s)\n  \n  # get rid of all instances of \\'\n  s = re.sub(r\"\\\\'\", \"'\", s)\n  return s\n\n# create an identical dictionary with the cleaned data\ncleaned_lyrics = {}\nfor key, value in raw_lyrics.items():\n  cleaned_lyrics[key] = {}\n  for k, v in value.items():\n    new_k = clean_title(k[:-6]) # get rid of trailing 'Lyrics' at end of each title\n    cleaned_lyrics[key][new_k] = {}\n    for a, b in v.items():\n      new_lyrics = clean_string(b) # clean lyrics\n      cleaned_lyrics[key][new_k][a] = new_lyrics\n\n\nPreparing The Data For Sentiment Analysis\n      The sentiment analyzer used in this project is VADER (Valence Aware Dictionary and sEntiment Reasoner). Designed to handle social media texts, VADER is well-suited to analyze informal, conversational language which is similar to the language found in rap lyrics. Common among both is slang, abbreviations, casual expressions, and references to well-known figures. VADER also considers the context of the entire sentence or phrase. This is especially important for Eminem’s lyrics, as context plays a key role in interpreting sentiment, especially where sentiment can shift as often as every line. VADER is also skilled in identifying negations and intensifiers of words (“very good” v.s. “not good” v.s. “good”), which is important as phrases in rap lyrics are often layered and complex.\n      VADER does struggle with a few areas, which influenced how the lyrical texts were prepared. VADER is generally designed for short texts, analyzing sentiment on a sentence-by-sentence or phrase-by-phrase basis. In larger pieces of texts, the sentiment analyzer relies on punctuation to both divide the text into manageable chunks and help determine sentiment intensity. There are no sentence ending punctuation in the lyrical text, however, meaning clear phrase boundaries must be artificially introduced by breaking up the text before feeding it to the analyzer. Fortunately, Genius.com’s lyrics already contain newlines which break songs up into bars. Using this separator, each text is broken up by phrase and stored as a list of strings, ready to be analyzed.\n\n\nShow the code\n# new dictionary separates the lyrics by line\ndivided_lyrics = {}\nfor key, value in cleaned_lyrics.items():\n  divided_lyrics[key] = {}  # add key (album title) to dictionary\n  divided_lyrics[key]['a-sentiment'] = 0 # initialize int to hold album sentiment\n  for k, v in value.items():\n    divided_lyrics[key][k] = {}\n    divided_lyrics[key][k]['s-sentiment'] = 0 # initialize int to hold song sentiment\n    for a, b in v.items():\n      split_lyrics = [line for line in b.split('\\n') if line] # creates list of strings with '\\n' as delimiter\n      divided_lyrics[key][k][a] = split_lyrics\n\n\nCalculating Sentiment\n      Each song’s sentiment score was originally the sum of all line’s sentiment scores. However, this method fails to account for the varying album sizes and the different song lengths. A 4-minute song will naturally have a higher score than a 30-second intro song, just as an album with 18 tracks will be more likely to have a greater score than a 12-track album. Averaging each song’s sentiment by dividing the sum phrase sentiment by the number of phrases in each song will provide a more normalized view and mitigate any distortions due to varying line counts. Repeating this approach when calculating album sentiment scores will ensure that the differing album lengths also does not cause any distortions.\n\n\nShow the code\n# calculating total sentiment scores of songs and albums\nsia = vader.SentimentIntensityAnalyzer()     # initialize sentiment analyzer\nfor album, tracks in divided_lyrics.items(): # key is album name, value dictionary including songs and sent score\n  album_sentiment = 0                        # sentiment to be updated for each song\n  for song, lines in tracks.items():         # song is keys under album, lines is dictionary\n    song_sentiment = 0                       # sentiment to be updated for each phrase\n    if isinstance(lines, dict):              # if not a-sentiment\n      for lyrics, l in lines.items():        # lyrics is keys under song\n        if isinstance(l, list):              # if not s-sentiment\n          for bars in l:\n            song_sentiment += sia.polarity_scores(bars)['compound'] # update song_sentiment\n      divided_lyrics[album][song]['s-sentiment'] = song_sentiment\n      album_sentiment += song_sentiment # update album_sentiment\n  divided_lyrics[album]['a-sentiment'] = album_sentiment\n\n  \n# calculating average sentiment scores for songs and albums.\nsia = vader.SentimentIntensityAnalyzer()\nfor album, tracks in divided_lyrics.items():\n  album_size = 0                             # size of album initialized as zero\n  album_sentiment = 0\n  for song, lines in tracks.items(): \n    song_sentiment = 0\n    if isinstance(lines, dict): \n      song_size = 0                          # size of song initialized as zero\n      album_size += 1                        # increment album size for each song   \n      for lyrics, l in lines.items(): \n        if isinstance(l, list):\n          for bars in l:\n            song_size += 1                   # increment song size for each line\n            song_sentiment += sia.polarity_scores(bars)['compound']\n      if song_size != 0:      # prevents dividing by zero for instrumental songs\n        average_sent_score = song_sentiment / song_size # take the average\n      divided_lyrics[album][song]['s-sentiment'] = average_sent_score\n      album_sentiment += average_sent_score\n  divided_lyrics[album]['a-sentiment'] = album_sentiment / album_size # take the average"
  },
  {
    "objectID": "posts/final_blog.html#results",
    "href": "posts/final_blog.html#results",
    "title": "Sentiment in Eminem’s Discography",
    "section": "Results",
    "text": "Results\n      To visualize the overall sentiment in Eminem’s albums, a colored pie chart was used to display the frequencies of different sentiment strengths.\n\n\nShow the code\n# transforms dictionary into a list of tuples \n# structured [(album, [(song, score)])]\n# input divided_lyrics\n# outputs as list of tuples, only includes album, song, and s-sentiment\ndef plot_sentiment_songs(album_dict):\n  album_scores = []\n  for key, value in album_dict.items():\n    song_scores = []\n    for k, v in value.items():\n      if isinstance(v, dict):      # if not album sentiment\n        for a, b in v.items():\n          if isinstance(b, float): # if song sentiment\n            song_scores.append((k, b))\n    album_scores.append((key, song_scores))\n  return album_scores\n\nalbum_plot = plot_sentiment_songs(divided_lyrics)\n\n# reorder albums by order of release\nrelease_order = [9, 0, 6, 4, 7, 2, 1, 11, 5, 10, 8, 12] \ndata_set = []\nfor i in release_order:\n  data_set.append(album_plot[i])\n\n# pie chart\nvery_neg = 0\nvery_pos = 0\npos = 0\nneg = 0\n\n# calculate frequency of sentiment strengths\nall_scores = []\nfor a in data_set:\n  sent_scores = [item[1] for item in a[1]]\n  all_scores += sent_scores\nfor s in all_scores:\n  if s &lt;= -.1:\n    very_neg += 1\n  elif s &gt; -.1 and s &lt;= 0:\n    neg += 1\n  elif s &lt; .1 and s &gt; 0:\n    pos += 1\n  elif s &gt;= .1:\n    very_pos += 1\n\n# plot the pie chart\ncategories = ['Strong Negative (Below -0.1)', 'Negative', 'Strong Positive (above 0.1)', 'Positive']\nvalues = [very_neg, neg, very_pos, pos]\ncolors = ['purple', 'blue', 'yellow', 'orange']\nfig, ax = plt.subplots(figsize=(8, 8)) \nax.pie(values, labels=categories, autopct='%1.1f%%', colors=colors)\nax.axis('equal') # ensures pie is drawn as circle\nplt.title('Figure 1: Sentiment Score Distribution')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n      A trend towards more negative emotion is represented in Figure 1. 75.2% of Eminem’s songs have negative sentiments, with 40% of them carrying a strong negative sentiment score of -0.1 or below. By contrast, only 24.8% of Eminem’s songs are positive and only 18.1% of these convey a positive sentiment stronger than 0.1. Not only is the frequency of songs with negative sentiment greater than those with positive sentiments, but negative scores are more likely to be strong than positive scores.\n\n\nShow the code\nalbum_names = []\npos_scores = []\nneg_scores = []\n\n# in order, add the strongest positive and negative scores to lists\nfor a in data_set:\n  album_names.append(a[0])\n  sent_scores = [item[1] for item in a[1]]\n  pos_scores.append(max(sent_scores))\n  neg_scores.append(abs(min(sent_scores)))\n\n# plotting the bars\nnum_alb = 12\nx = np.arange(num_alb)  # label locations\nwidth = 0.35  # bar width\n\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plotting the bars\nbars1 = ax.bar(x - width/2, pos_scores, width, label='Positive', color='orange')\nbars2 = ax.bar(x + width/2, neg_scores, width, label='Negative', color='purple')\nax.set_xlabel('Albums')\nax.set_ylabel('Sentiment Score Magnitude')\nax.set_title(\"Figure 2: Comparison of Album's Most Positive and Negative Sentiment Scores\")\nax.set_xticks(x)\nax.set_xticklabels(album_names, rotation=45, ha='right')          \nax.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\n      Figure 2 reveals there are only two albums - Recovery and Music to Be Murdered By: Side B - where the strongest positive score is greater than the strongest negative score. There is also a noticeable gap of at least 0.05 points between the positive and negative scores in his albums, with nearly half of these gaps being greater than 0.1.\n      The dominance of negative sentiment across Eminem’s work supports the broader trend in his music towards exploring topics of adversity and struggle. Furthermore, this degree of negative sentiment suggests that these difficult subjects are discussed in a complex manner, rather than glossing over their more painful aspects. The high degree of intensity indicates strong emotions as well. The most frequent words with negative sentiment, therefore, are expected to be explicit and aggressive language, rather than the more mellow tone which distressed language conveys.\n\n\nShow the code\n# plotting average sentiment for each album in order\n# input divided_lyrics\n# output plots a-sentiment as bar chart\ndef plot_album_sentiment(d):\n  album_sent = []\n  for key, value in d.items():\n    for k, v in value.items():\n      if isinstance(v, float):  # if sentiment score\n        album_sent.append((key, v))\n        \n  release_order = [9, 0, 6, 4, 7, 2, 1, 11, 5, 10, 8, 12]\n  album_plot = []\n  for i in release_order:\n    album_plot.append(album_sent[i])\n  album_names = [t[0] for t in album_plot]\n  sent_score = [t[1] for t in album_plot]\n  \n  colors = ['orange' if score &gt;= 0 else 'purple' for score in sent_score]\n  plt.figure(figsize=(10, 6))\n  plt.bar(album_names, sent_score, color=colors) # changed from song name to track number, as names were too long\n  plt.title('Figure 3: Album Average Sentiment Score')\n  plt.xlabel('Album')\n  plt.ylabel('Sentiment')\n  plt.xticks(rotation=45, ha='right')\nplot_album_sentiment(divided_lyrics)\n\n\n\n\n\n\n\n\n\n      The dominance of negative sentiment across his works is also represented in the sentiment scores of his albums. No album, as presented in Figure 3, has an overall positive sentiment. The albums with the strongest negative sentiment are his first three albums, while both The Marshall Mathers LP 2 and The Death of Slim Shady (Coup De Grace) are outliers for their strong negative sentiments in his later works.\n      Central to Eminem’s identity is his two personas. Eminem is his name as the rapper. He has an alter-ego called Slim Shady, who is behind some of Eminem’s most explicit and graphic songs. Slim Shady embodies the rage and pain behind Eminem’s experiences. This persona was most prominent in his first three albums, which is reflected by the fact that these three hold the strongest negative sentiment. Eminem’s more mature and vulnerable persona is Marshall Mathers, which is his birth name. Eminem’s more introspective lyrics are most often the work of this persona. Interestingly, the five albums with the strongest negative sentiment, as well as being the only albums with sentiments below -0.05, are also the five albums which contain one of his three personas (‘Slim Shady’, ‘Marshall Mathers’, ‘Eminem’) in the album title. This correlation suggests a close relationship between Eminem’s personal struggles and intense negative sentiment. This relationship can be seen below in Figure 4.\n\n\nShow the code\n# same as plot_album_sentiment, but adds color and a legend\ndef plot_album_sentiment_colored(d):\n  album_sent = []\n  for key, value in d.items():\n    for k, v in value.items():\n      if isinstance(v, float):  # each sentiment score\n        album_sent.append((key, v))\n  release_order = [9, 0, 6, 4, 7, 2, 1, 11, 5, 10, 8, 12]\n  album_plot = []\n  for i in release_order:\n    album_plot.append(album_sent[i])\n  album_names = [t[0] for t in album_plot]\n  sent_score = [t[1] for t in album_plot]\n  \n  # select and color the persona's albums\n  special_albums = [0, 1, 2, 6, 11]\n  colors = ['red' if i in special_albums else 'black' for i in range(len(album_names))]\n  \n  plt.figure(figsize=(10, 6))\n  plt.bar(album_names, sent_score, color=colors)\n  \n  # add legend\n  red_patch = mpatches.Patch(color='red', label='Persona in Album Title')\n  plt.legend(handles=[red_patch])\n  \n  plt.title('Figure 4: Album Average Sentiment Score')\n  plt.xlabel('Album')\n  plt.ylabel('Sentiment')\n  plt.xticks(rotation=45, ha='right')\nplot_album_sentiment_colored(divided_lyrics)\n\n\n\n\n\n\n\n\n\n      As stated before, Eminem is known for his explicit and crass language, his aggressive and violent themes, and deep exploration into dark and emotionally intense themes. In order to better understand how these topics are represented by the sentiment contained in his works, the ten most frequent negative and positive words will be presented. When processing these words, the use of slang and informal language had to be taken into account. For example, the word killing can be used as violence (“I’m killing you”), as a way to express wealth (“Rob the bank, you’ll make a killing”), and as an expression of pride (“You’re killing it man”). To avoid this distortion, stemming the words was avoided.\n\n\nShow the code\n# creates a new dictionary replacing the list of lines with a list of individual words from divided_lyrics\ndef words_dict(d):\n  new_dict = {}\n  for key, value in d.items():\n    if key != 'Eminem Presents the Re-Up':\n      new_dict[key] = {}\n      if isinstance(value, dict): # if not a-sentiment\n        for k, v in value.items():\n          if isinstance(v, dict): # if not s-sentiment\n            lyrics = \" \".join(v['lyrics']) # join all lines together separated by white space\n            \n            # split, strip punctuation, lower-case all words, and remove stop words\n            all_words = lyrics.split()\n            lower_words = [word.strip(string.punctuation).lower() for word in all_words]\n            new_dict[key][k] = [w for w in lower_words if w not in myStopWords]\n            \n  return new_dict\n\nword_lyrics = words_dict(divided_lyrics)\n\n# returns a tuple containing all most common positive and negative words, and their frequencies for each album\ndef album_common_sentiment(d):\n  com_pos = []\n  com_neg = []\n  for album, songs in d.items():\n    all_lyrics = []\n    for key, lyrics in songs.items(): # add all words from songs to album lyrics\n      all_lyrics += lyrics\n    positive = []\n    negative = []\n    \n    # find compound score of each word\n    for word in all_lyrics:\n      word_score = sia.polarity_scores(word)\n      if word_score['compound'] &gt; 0:\n        positive.append(word)\n      elif word_score['compound'] &lt; 0:\n        negative.append(word)\n        \n    # list of (word, frequency) for 10 most common neg and pos\n    common_positive = nltk.FreqDist(positive).most_common(10)\n    common_negative = nltk.FreqDist(negative).most_common(10)\n    # add to tuple with album name\n    com_pos.append((album, common_positive))\n    com_neg.append((album, common_negative))\n  return (com_pos, com_neg)  \n\n# language categories \ncurse_words = ['fuck', 'ass', 'shit', 'damn', 'bitch', 'goddamn', 'dick', 'motherfucker', 'motherfucking', 'hell', 'niggas']\naggressive_words = ['kill', 'hurt', 'fight', 'cut', 'crazy', 'die', 'hate']\ndistress_words = ['leave', 'lose', 'stop', 'lost', 'anxious', 'hide', 'regrets', 'tired', 'sorry', 'falling', 'alone', \n                  'pain', 'hard', 'worse']\nword_categories = {\n  'curse_words': curse_words,\n  'aggressive_words': aggressive_words,\n  'distress_words': distress_words,\n}\n\n# plots the most common negative words as horizontal bar charts\ndef plot_negative_sentiment_words(neg_com):\n  \n  fig, axs = plt.subplots(6, 2, figsize=(12, 24))\n  axs = axs.flatten()\n  release_order = [8, 0, 5, 3, 6, 2, 1, 10, 4, 9, 7, 11]\n  for j in range(len(neg_com)):\n    i = release_order[j]\n    this_album = neg_com[i]\n    album_title = this_album[0]\n    words = this_album[1]\n    word, freq = zip(*words)\n    # inverse order so most common at top\n    word = word[::-1]\n    freq = freq[::-1]\n    \n    # map color to word category\n    color_map = {\n      'curse_words': 'red', \n      'aggressive_words': 'orange',\n      'distress_words': 'blue',\n      'default': 'black',\n    }\n    colors = []\n    for w in word:\n        if w in word_categories['distress_words']:\n            colors.append(color_map['distress_words'])\n        elif w in word_categories['curse_words']:\n            colors.append(color_map['curse_words'])\n        elif w in word_categories['aggressive_words']:\n            colors.append(color_map['aggressive_words'])\n        else:\n            colors.append(color_map['default'])\n            \n    # plot subgraphs\n    axs[j].barh(word, freq, color=colors)\n    axs[j].set_title(album_title)\n    axs[j].set_xlabel('Frequency')\n    axs[j].set_ylabel('Word')\n\n    patches = [\n        mpatches.Patch(color=color_map['curse_words'], label='Explicit Language '),\n        mpatches.Patch(color=color_map['aggressive_words'], label='Aggressive Language'),\n        mpatches.Patch(color=color_map['distress_words'], label='Distressed Language'),\n    ]\n  plt.legend(handles=patches)\n    \n  fig.text(0.5, 0.01, \"Figure 5: 10 Most Common Negative Words\", ha='center', va='center', fontsize=16)\n  plt.tight_layout(rect=[0, 0.02, 1, 1])  # adjusts the space for caption without overlap\n\nplot_negative_sentiment_words(album_common_sentiment(word_lyrics)[1])\n\n\n\n\n\n\n\n\n\n      The overwhelming majority of words containing negative sentiment are curse words. This was expected, since explicit language is commonly being used to intensify sentiment. In the context of Eminem’s discography, this frequent cursing is reflected in the strong intensity of negative sentiment. It is also observed that most albums feature either mostly aggressive or mostly distressed language. The expectation was that the Figure 5 would reflect the theme of resilience by showing a clear majority of distressed language compared to aggressive language. This is because distressed language often portrays the challenges and internal conflicts faced by an individual. Contrastly, aggressive language typically focuses on confrontation and outwards expressions of hostility, which does not as clearly convey the strive for personal growth.\n\n\nShow the code\n# plot distribution of categories in pie chart\ndef negative_pie_chart(neg_com):\n  # calculate frequency of each category\n  aggression = 0\n  curses = 0\n  distress = 0\n  other = 0 \n  for i in range(len(neg_com)):\n    this_album = neg_com[i]\n    album_title = this_album[0]\n    words = this_album[1]\n    for w in words:\n      if w[0] in word_categories['distress_words']:\n          distress += w[1]\n      elif w[0] in word_categories['curse_words']:\n          curses += w[1]\n      elif w[0] in word_categories['aggressive_words']:\n          aggression += w[1]\n      else:\n          other += w[1]\n          \n  # plotting\n  values = [curses, distress, aggression, other]\n  categories = ['Curses', 'Distress', 'Aggression', 'Other']\n  fig, ax = plt.subplots(figsize=(8, 8))\n  wedges, texts, autotexts = ax.pie(\n        values, \n        labels=categories, \n        autopct='%1.1f%%',  # Show percentages\n        colors=['red','blue','orange','gray'], \n        startangle=140  # change angle to display aggression and distress at top\n    )\n  ax.legend(wedges, categories, title=\"Categories\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n  plt.title('Figure 6: Distribution of Negative Sentiment')\n\nnegative_pie_chart(album_common_sentiment(word_lyrics)[1])\n\n\n\n\n\n\n\n\n\n      While distressed language is more prevalent than aggressive language, the difference in frequency is unexpectedly close. A mere 1.2% difference, as shown by Figure 6, indicates much more focus on anger and hostility than expected. Still, the prominence of distressed words presents a strong focus on resilience dealing with feelings of regret, sadness, and exhaustion. The high prevalence of explicit language at 65.7% reflects the intense expression of these emotions, in addition to those carried by the more aggressive words.\n\n\nShow the code\n# plot 10 most common positive words in horizontal bar chart\ndef plot_positive_sentiment_words(neg_com):\n  # same as plot_negative_sentiment_words\n  fig, axs = plt.subplots(6, 2, figsize=(12, 24))\n  axs = axs.flatten()  # Flatten the 2D array to 1D for easier indexing\n  release_order = [8, 0, 5, 3, 6, 2, 1, 10, 4, 9, 7, 11]\n  for j in range(len(neg_com)):\n    i = release_order[j]\n    this_album = neg_com[i]\n    album_title = this_album[0]\n    words = this_album[1]\n    word, freq = zip(*words)\n    word = word[::-1]\n    freq = freq[::-1]\n    \n    # map colors to motivational language\n    colors = []\n    for w in word:\n        if w == 'want':\n            colors.append('green')\n        elif w == 'better' or w == 'hope' or w == 'dream':\n            colors.append('yellow')\n        else:\n            colors.append('black')\n            \n    # plotting\n    axs[j].barh(word, freq, color=colors)\n    axs[j].set_title(album_title)\n    axs[j].set_xlabel('Frequency')\n    axs[j].set_ylabel('Word')\n\n    patches = [\n        mpatches.Patch(color='yellow', label='Motivational Language'),\n    ]\n\n    # Add the legend to the figure\n  plt.legend(handles=patches)\n    \n  fig.text(0.5, 0.01, \"Figure 7: 10 Most Common Positive Words\", ha='center', va='center', fontsize=16)\n  plt.tight_layout(rect=[0, 0.02, 1, 1])  # adjusts the space for caption without overlap\nplot_positive_sentiment_words(album_common_sentiment(word_lyrics)[0])\n\n\n\n\n\n\n\n\n\n      Thematic elements are much more sparse in the elements with positive sentiment. Despite this, we can observe that motivational buzzwords are present across his albums. This type of language conveys a desire for personal growth. Notably, inspirational words with a determined tone, such as ‘overcome’ and ‘strive’, are totally absent in favor of more aspirational words such as ‘hope’ and ‘dream’. Along with the very frequent use of ‘want’, which is similarly passive, these reflect the themes of resilience and personal growth instead of the more uplifting themes of triumph and success. This is reflected by the dominance of negative sentiment over positive sentiment, and represents Eminem’s continuous personal journey of growth and acceptance."
  },
  {
    "objectID": "posts/final_blog.html#discussion",
    "href": "posts/final_blog.html#discussion",
    "title": "Sentiment in Eminem’s Discography",
    "section": "Discussion",
    "text": "Discussion\n      The analysis finds that Eminem’s discography contains overwhelmingly negative sentiment, both in frequency and intensity. Albums with the strongest negative sentiment are tied closely to his identity, containing the names of one of his three personas - Marshall Mathers, Eminem, and Slim Shady. This further alludes to the deeply personal nature of Eminem’s exploration of adversity and resilience.\n      The dominance of negative sentiment underscores the central themes of struggle and resilience. The frequent use of explicit, distressed, and aggressive language portray his internal and external struggles. The similar frequency of aggression and distress suggests his expression of this theme is both outwardly confrontational and intimately introspective. The rawness of his experiences are intensified by his ubiquitous use of explicit language. And yet the presence of motivational language in the scarcer positive sentiment in his lyrics emphasizes his narrative of personal growth. Despite how the negative sentiment overshadows the positive, these moments of aspirational language reflects the theme of personal growth and resilience among struggle and hardship.\n      These findings offer unique insights into Eminem’s personal journey, particularly highlighting his growth and struggles. For instance, the intense negative sentiment in his first three albums coincides with his tumultuous relationship with his now ex-wife, Kim Scott. His later albums, which display a wider spectrum of negative sentiment, reflect both his journey to sobriety and maturation as an individual. Beyond the scope of this project, such findings and the methods to achieve them can be used to analyze sentiment trends in other artists’ work, providing valuable perspectives on the relationship between personal experiences and artistic expression."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]